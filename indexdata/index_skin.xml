<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

<!-- ********** -->
<!-- List of Panoramas -->
<!-- id : panoramalist -->
<!-- ********** -->


<style name="panoramaliststyleselectedpanorama" 
    css="
text-align:right;
color:#000000;
font-family:Arial;
font-weight:bold;
font-size:16px;"
  />

  <style name="panoramaliststyleitempanoramacolor"
         height="26"
         type="text"
         alpha="1"
         css="
              text-align:right;
              color:#ffffff;
              font-family:Arial;
              font-weight:bold;
              font-size:16px;
             " />

  <style name="panoramaliststyleitempanorama"
         align="topright"
         interactivecontent="false"
         bg="false"
         handcursor="true"
         x="0"

         width="100%"

  />

  <layer keep="true"
         name="panoramalistbg"
         type="image"
         url="%FIRSTXML%/graphics/panoramalisttext/background.png"
         scale9grid="10|10|80|80"
         zorder="1"
         visible="false"
         width="100"

         height="494"

         align="topright"
         x="0" y="0"
         >

    <layer name="panoramalistpanopano28"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano28_title);escape(html);"  
           onclick="mainloadscene(pano28);" 
           y="0"/>
    <layer name="panoramalistpanopano10"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano10_title);escape(html);"  
           onclick="mainloadscene(pano10);" 
           y="26"/>
    <layer name="panoramalistpanopano27"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano27_title);escape(html);"  
           onclick="mainloadscene(pano27);" 
           y="52"/>
    <layer name="panoramalistpanopano26"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano26_title);escape(html);"  
           onclick="mainloadscene(pano26);" 
           y="78"/>
    <layer name="panoramalistpanopano25"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano25_title);escape(html);"  
           onclick="mainloadscene(pano25);" 
           y="104"/>
    <layer name="panoramalistpanopano24"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano24_title);escape(html);"  
           onclick="mainloadscene(pano24);" 
           y="130"/>
    <layer name="panoramalistpanopano23"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano23_title);escape(html);"  
           onclick="mainloadscene(pano23);" 
           y="156"/>
    <layer name="panoramalistpanopano22"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano22_title);escape(html);"  
           onclick="mainloadscene(pano22);" 
           y="182"/>
    <layer name="panoramalistpanopano21"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano21_title);escape(html);"  
           onclick="mainloadscene(pano21);" 
           y="208"/>
    <layer name="panoramalistpanopano20"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano20_title);escape(html);"  
           onclick="mainloadscene(pano20);" 
           y="234"/>
    <layer name="panoramalistpanopano19"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano19_title);escape(html);"  
           onclick="mainloadscene(pano19);" 
           y="260"/>
    <layer name="panoramalistpanopano18"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano18_title);escape(html);"  
           onclick="mainloadscene(pano18);" 
           y="286"/>
    <layer name="panoramalistpanopano17"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano17_title);escape(html);"  
           onclick="mainloadscene(pano17);" 
           y="312"/>
    <layer name="panoramalistpanopano16"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano16_title);escape(html);"  
           onclick="mainloadscene(pano16);" 
           y="338"/>
    <layer name="panoramalistpanopano11"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano11_title);escape(html);"  
           onclick="mainloadscene(pano11);" 
           y="364"/>
    <layer name="panoramalistpanopano15"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano15_title);escape(html);"  
           onclick="mainloadscene(pano15);" 
           y="390"/>
    <layer name="panoramalistpanopano1360"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano1360_title);escape(html);"  
           onclick="mainloadscene(pano1360);" 
           y="416"/>
    <layer name="panoramalistpanopano13"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano13_title);escape(html);"  
           onclick="mainloadscene(pano13);" 
           y="442"/>
    <layer name="panoramalistpanopano12"
           style="panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor"
           onloaded="getmessage(html, pano12_title);escape(html);"  
           onclick="mainloadscene(pano12);" 
           y="468"/>

  </layer>






  <action name="panoramalistUpdateLanguage">
    if(layer[panoramalistpanopano28],
      getmessage(panoHtml, pano28_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano28].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano10],
      getmessage(panoHtml, pano10_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano10].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano27],
      getmessage(panoHtml, pano27_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano27].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano26],
      getmessage(panoHtml, pano26_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano26].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano25],
      getmessage(panoHtml, pano25_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano25].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano24],
      getmessage(panoHtml, pano24_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano24].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano23],
      getmessage(panoHtml, pano23_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano23].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano22],
      getmessage(panoHtml, pano22_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano22].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano21],
      getmessage(panoHtml, pano21_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano21].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano20],
      getmessage(panoHtml, pano20_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano20].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano19],
      getmessage(panoHtml, pano19_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano19].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano18],
      getmessage(panoHtml, pano18_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano18].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano17],
      getmessage(panoHtml, pano17_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano17].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano16],
      getmessage(panoHtml, pano16_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano16].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano11],
      getmessage(panoHtml, pano11_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano11].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano15],
      getmessage(panoHtml, pano15_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano15].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano1360],
      getmessage(panoHtml, pano1360_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano1360].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano13],
      getmessage(panoHtml, pano13_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano13].html, get(panoHtml));
    );
    if(layer[panoramalistpanopano12],
      getmessage(panoHtml, pano12_title);escape(get(panoHtml));
      set(layer[panoramalistpanopano12].html, get(panoHtml));
    ); 
  </action>

  <events name="panoramalistevents" 
    onTourStart="showpanoramalist();"
    hidetourcontrols="hidepanoramalist();"
    showtourcontrols="showpanoramalist();"
    onnewpano="selectItempanoramalist();"
    changetourlanguage="panoramalistUpdateLanguage();"
    keep="true"/>

<action name="selectItempanoramalist">
	
	for(set(ipanoramalist,0), ipanoramalist LT layer.count, inc(ipanoramalist),
		if(layer[get(ipanoramalist)].parent == panoramalistbg,
			
			if(layer[get(ipanoramalist)].style == "panoramaliststyleitempanorama|panoramaliststyleitempanoramacolor",
				txtadd(currentLayerNamepanoramalist, panoramalist, pano, get(xml.scene));
			);
			
			if(layer[get(ipanoramalist)].name == currentLayerNamepanoramalist,
				if(layer[get(ipanoramalist)].style == "panoramaliststyleitemgroup|panoramaliststyleitemgroupcolor",
					set(layer[get(ipanoramalist)].css, get(style[panoramaliststyleselectedgroup].css));
				,
					set(layer[get(ipanoramalist)].css, get(style[panoramaliststyleselectedpanorama].css));
				);
			,
				
				indexoftxt(dest, layer[get(ipanoramalist)].name, group);
				if(dest LT 0,
					
					if(layer[get(ipanoramalist)].style == "panoramaliststyleitemgroup|panoramaliststyleitemgroupcolor",
						set(layer[get(ipanoramalist)].css, get(style[panoramaliststyleitemgroupcolor].css));
					,
						set(layer[get(ipanoramalist)].css, get(style[panoramaliststyleitempanoramacolor].css));
					);
				);
			);
			delete(currentLayerNamepanoramalist);
		);
	);
</action>

  <action name="hidepanoramalist">
    set(layer[panoramalistbg].visible, false);
  </action>
  <action name="showpanoramalist">
    set(layer[panoramalistbg].visible, true);
  </action>




  <events name="Bootstrap_External_Commandsevents" onnewpano="Bootstrap_External_Commandsonp" keep="true"/>
  <action name="Bootstrap_External_Commandsonp">
  	js(updatePanorama(get(xml.scene)););
  </action>

<!-- ********** -->
<!-- Circles Control Bar -->
<!-- id : CirclesControlBar -->
<!-- ********** -->

  <krpano CirclesControlBarbarbuilt="false" CirclesControlBarbackgroundwidthwhenclosed="0" CirclesControlBarbackgroundwidthwhenopened="0" CirclesControlBarIsOpened="false" />
  <events name="CirclesControlBarevents" 
    onxmlcomplete="CirclesControlBarbuildMenuBar();" 


    keep="true" />



  <action name="CirclesControlBarbuildMenuBar">
    ifnot (CirclesControlBarbarbuilt, CirclesControlBarbuildMenu(); set(CirclesControlBarbarbuilt, true););
  </action>

  <style name="CirclesControlBar_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         onhover="showTooltip('plugin', CirclesControlBarmenuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />
  <style name="CirclesControlBar_btn_style_off"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         onhover="showTooltip('plugin', CirclesControlBarmenuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />

  <layer name="CirclesControlBar_menu_bg"
         keep="true"
         type="container"
         zorder="3"
         width="40"
         height="40"
         align="bottom"
         x="0" y="10"
         maskchildren="true"
         rotate="0"
         visible="false"
         >


    <layer name="CirclesControlBarbtn_ctrlmode_move_to"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_move_to.png"
            style="CirclesControlBar_btn_style"
            tooltip="CirclesControlBarctrlmodeMoveTip"
            onclick="setControlModeMoveTo();
"
            visible="false"
            devices="desktop"
            />
    <layer name="CirclesControlBarbtn_ctrlmode_drag_to"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_drag_to.png"
            style="CirclesControlBar_btn_style"
            tooltip="CirclesControlBarctrlmodeDragTip"
            onclick="setControlModeDragTo();
"
            visible="false"
            devices="desktop"
            />

    <layer name="CirclesControlBarbtn_in"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_zoom_in.png"
            ondown="viewControlZoomIn(false);"
            onup="viewControlZoomStop();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            tooltip="CirclesControlBarzoomInTip"
            devices="desktop"
            />
    <layer name="CirclesControlBarbtn_out"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_zoom_out.png"
            ondown="viewControlZoomOut(false);
"
            onup="viewControlZoomStop();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            tooltip="CirclesControlBarzoomOutTip"
            devices="desktop"
            />

    <layer name="CirclesControlBarbtn_left"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_move_left.png"
            ondown="viewControlMoveLeft(false);
"
            onup="viewControlMoveHoriStop();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            tooltip="CirclesControlBarmoveLeftTip"
            devices="desktop"
            />
    <layer name="CirclesControlBarbtn_right"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_move_right.png"
            ondown="viewControlMoveRight(false);
"
            onup="viewControlMoveHoriStop();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            tooltip="CirclesControlBarmoveRightTip"
            devices="desktop"
            />

    <layer name="CirclesControlBarbtn_up"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_move_up.png"
            ondown="viewControlMoveUp(false);
"
            onup="viewControlMoveVertStop();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            tooltip="CirclesControlBarmoveUpTip"
            devices="desktop"
            />
    <layer name="CirclesControlBarbtn_down"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_move_down.png"
            ondown="viewControlMoveDown(false);
"
            onup="viewControlMoveVertStop();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            tooltip="CirclesControlBarmoveDownTip"
            devices="desktop"
            />



    <layer name="CirclesControlBarbtn_prev_pano"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_previous_scene.png"
            onclick="loadPreviousScene();
"
            style="CirclesControlBar_btn_style"
            tooltip="CirclesControlBarprevSceneTip"
            visible="false"
            />
    <layer name="CirclesControlBarbtn_next_pano"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_next_scene.png"
            onclick="loadNextScene();
"
            style="CirclesControlBar_btn_style"
            tooltip="CirclesControlBarnextSceneTip"
            visible="false"
            />



    <layer name="CirclesControlBarbtn_openfs"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="CirclesControlBaropenFsTip"
            />
    <layer name="CirclesControlBarbtn_closefs"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="CirclesControlBarcloseFsTip"
            />

    <layer name="CirclesControlBarbtn_autorotate_on"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_start_autorotation.png"
            onclick="resumeautorotation();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            tooltip="CirclesControlBarautorotateOnTip"
            />
    <layer name="CirclesControlBarbtn_autorotate_off"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_stop_autorotation.png"
            onclick="pauseautorotation();
"
            style="CirclesControlBar_btn_style"
            visible="false"
            tooltip="CirclesControlBarautorotateOffTip"
            />



    <layer name="CirclesControlBarbtn_display_help"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_help.png"
            onclick="CirclesControlBardisplayHelp();"
            style="CirclesControlBar_btn_style"
            devices="desktop"
            visible="false"
            tooltip="CirclesControlBardisplayHelpTip"
            />
    <layer name="CirclesControlBarbtn_close_help"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_help.png"
            onclick="CirclesControlBarcloseHelp();"
            style="CirclesControlBar_btn_style"
            visible="false"
            devices="desktop"
            tooltip="CirclesControlBarhideHelpTip"
            />



    <layer name="CirclesControlBarbtn_hidecontrols"
           url="%FIRSTXML%/graphics/circlescontrolbar/btn_hide_controls.png"
           style="CirclesControlBar_btn_style"
           onclick="CirclesControlBarhideMenuControls();hideTourControls();
"
           visible="false"
           tooltip="CirclesControlBarhideControlsTip"
           />
    <layer name="CirclesControlBarbtn_showcontrols"
           url="%FIRSTXML%/graphics/circlescontrolbar/btn_show_controls.png"
           style="CirclesControlBar_btn_style"
           onclick="CirclesControlBarshowMenuControls();showTourControls();
"
           tooltip="CirclesControlBardisplayControlsTip"
           visible="false"
           />
 </layer>





	<events name="CirclesControlBarcontrolmodechangedevent" 
		oncontrolmodechanged="CirclesControlBarupdateControlModeButtons();" 
		keep="true" />
	<action name="CirclesControlBarHideControlModeButtons">
		set(layer[CirclesControlBarbtn_ctrlmode_move_to].visible, false);
		set(layer[CirclesControlBarbtn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="CirclesControlBarShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[CirclesControlBarbtn_ctrlmode_drag_to].visible, true);
			set(layer[CirclesControlBarbtn_ctrlmode_move_to].visible, false);
		,
			set(layer[CirclesControlBarbtn_ctrlmode_move_to].visible, true);
			set(layer[CirclesControlBarbtn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="CirclesControlBarupdateControlModeButtons">
	if (device.desktop,
		if (CirclesControlBarIsOpened,
			CirclesControlBarShowControlModeButtons();
		,
			CirclesControlBarHideControlModeButtons();
		);
	,
		CirclesControlBarHideControlModeButtons();
	);
	</action>


  <action name="CirclesControlBarhideMenuControls">
    set(CirclesControlBarIsOpened, false);
    set(layer[CirclesControlBarbtn_hidecontrols].visible, false);
    set(layer[CirclesControlBarbtn_showcontrols].visible, true);
if (scene.count GT 1,
	set(layer[CirclesControlBarbtn_next_pano].visible, false);
	set(layer[CirclesControlBarbtn_prev_pano].visible, false);
);


if (device.desktop,
	set(layer[CirclesControlBarbtn_in].visible, false);
	set(layer[CirclesControlBarbtn_out].visible, false);
);
if (device.desktop,
	set(layer[CirclesControlBarbtn_up].visible, false);
	set(layer[CirclesControlBarbtn_down].visible, false);
);
if (device.desktop,
	set(layer[CirclesControlBarbtn_left].visible, false);
	set(layer[CirclesControlBarbtn_right].visible, false);
);
	CirclesControlBarupdateFullscreenButtons();
	CirclesControlBarupdateHelpButtons();


	CirclesControlBarupdateAutorotationButtons();


	CirclesControlBarupdateControlModeButtons();




	set(layer[CirclesControlBar_menu_bg].width, get(CirclesControlBarbackgroundwidthwhenclosed));

	set(layer[CirclesControlBar_menu_bg].visible, true);
  </action>
  <action name="CirclesControlBarshowMenuControls">
    set(CirclesControlBarIsOpened, true);
    set(layer[CirclesControlBarbtn_hidecontrols].visible, true);
    set(layer[CirclesControlBarbtn_showcontrols].visible, false);
	set(layer[CirclesControlBar_menu_bg].visible, true);
if (scene.count GT 1,
	set(layer[CirclesControlBarbtn_next_pano].visible, true);
	set(layer[CirclesControlBarbtn_prev_pano].visible, true);
);


if (device.desktop,
	set(layer[CirclesControlBarbtn_in].visible, true);
	set(layer[CirclesControlBarbtn_out].visible, true);
);
if (device.desktop,
	set(layer[CirclesControlBarbtn_up].visible, true);
	set(layer[CirclesControlBarbtn_down].visible, true);
);
if (device.desktop,
	set(layer[CirclesControlBarbtn_left].visible, true);
	set(layer[CirclesControlBarbtn_right].visible, true);
);
	CirclesControlBarupdateFullscreenButtons();
	CirclesControlBarupdateHelpButtons();


	CirclesControlBarupdateAutorotationButtons();


	CirclesControlBarupdateControlModeButtons();



    set(layer[CirclesControlBar_menu_bg].width, get(CirclesControlBarbackgroundwidthwhenopened));
  </action>

  <layer name="CirclesControlBarhelpScreenBg"
         align="center"
         keep="true"
         onclick="CirclesControlBarcloseHelp();"
         url="%FIRSTXML%/graphics/circlescontrolbar/help_screen_bg.png"
         visible="false"
         rotate="-90"
         height="50%"
         width="prop"
         zorder="97"
         x="100%" />
  <layer name="CirclesControlBarhelpScreenFg"
         align="center"
         keep="true"
         onclick="CirclesControlBarcloseHelp();"
         url="%FIRSTXML%/graphics/circlescontrolbar/help_screen_fg.png"
         height="50%"
         width="prop"
         visible="false"
         rotate="90"
         zorder="98"
         x="-100%"
         displayed="false" />
  <action name="CirclesControlBardisplayHelp">
  if (device.desktop,
    set(layer[CirclesControlBarhelpScreenFg].displayed,true);
    set(layer[CirclesControlBarhelpScreenBg].visible,true);
    set(layer[CirclesControlBarhelpScreenFg].visible,true);
    tween(layer[CirclesControlBarhelpScreenFg].rotate,0, 1);
    tween(layer[CirclesControlBarhelpScreenFg].x,0, 1);
    tween(layer[CirclesControlBarhelpScreenBg].rotate,0, 1);
    tween(layer[CirclesControlBarhelpScreenBg].x,0, 1);
    CirclesControlBarupdateHelpButtons();
  );
  </action>
  <action name="CirclesControlBarcloseHelp">
  if (device.desktop,
    set(layer[CirclesControlBarhelpScreenFg].displayed,false);
    tween(layer[CirclesControlBarhelpScreenFg].rotate,  90, 1, easeOutQuad, set(layer[CirclesControlBarhelpScreenFg].visible,false););
    tween(layer[CirclesControlBarhelpScreenFg].x, -100%, 1);
    tween(layer[CirclesControlBarhelpScreenBg].rotate, -90, 1, easeOutQuad, set(layer[CirclesControlBarhelpScreenBg].visible,false););
    tween(layer[CirclesControlBarhelpScreenBg].x, 100%, 1);
    CirclesControlBarupdateHelpButtons();
  );
  </action>
	<action name="CirclesControlBarHideHelpButtons">
		set(layer[CirclesControlBarbtn_display_help].visible, false);
		set(layer[CirclesControlBarbtn_close_help].visible, false);
	</action>
	<action name="CirclesControlBarShowHelpButtons">
		if (layer[CirclesControlBarhelpScreenFg].displayed,
			set(layer[CirclesControlBarbtn_close_help].visible, true);
			set(layer[CirclesControlBarbtn_display_help].visible, false);
		,
			set(layer[CirclesControlBarbtn_display_help].visible, true);
			set(layer[CirclesControlBarbtn_close_help].visible, false);
		);
	</action>
	<action name="CirclesControlBarupdateHelpButtons">
	if (device.desktop,
		if (CirclesControlBarIsOpened,
			CirclesControlBarShowHelpButtons();
		,
			CirclesControlBarHideHelpButtons();
		);
	,
		CirclesControlBarHideHelpButtons();
	);
	</action>




  <events name="CirclesControlBarmenufullscreenchangeevent"
          onenterfullscreen="CirclesControlBarupdateFullscreenButtons();"
          onexitfullscreen="CirclesControlBarupdateFullscreenButtons();"
          keep="true"/>
	<action name="CirclesControlBarHideFullscreenButtons">
		set(layer[CirclesControlBarbtn_openfs].visible , false);
		set(layer[CirclesControlBarbtn_closefs].visible, false);
	</action>
	<action name="CirclesControlBarShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[CirclesControlBarbtn_openfs].visible , false);
				set(layer[CirclesControlBarbtn_closefs].visible, true);
			,
				set(layer[CirclesControlBarbtn_openfs].visible ,true);
				set(layer[CirclesControlBarbtn_closefs].visible,false);
			);
		,
			CirclesControlBarHideFullscreenButtons();
		);
	</action>
	<action name="CirclesControlBarupdateFullscreenButtons">
		if (CirclesControlBarIsOpened,
			CirclesControlBarShowFullscreenButtons();
		,
			CirclesControlBarHideFullscreenButtons();
		);
	</action>

	<events name="CirclesControlBarAutorotationEvents"
		onstartautorotation="CirclesControlBarupdateAutorotationButtons();"
		onresumeautorotation="CirclesControlBarupdateAutorotationButtons();"
		onstopautorotation="CirclesControlBarupdateAutorotationButtons();"
		onpauseautorotation="CirclesControlBarupdateAutorotationButtons();"
		keep="true"/>
	<action name="CirclesControlBarHideAutorotationButtons">
		set(layer[CirclesControlBarbtn_autorotate_off].visible, false);
		set(layer[CirclesControlBarbtn_autorotate_on].visible , false);
	</action>
	<action name="CirclesControlBarShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[CirclesControlBarbtn_autorotate_off].visible, false);
			set(layer[CirclesControlBarbtn_autorotate_on].visible , true);
		,
			set(layer[CirclesControlBarbtn_autorotate_off].visible, true);
			set(layer[CirclesControlBarbtn_autorotate_on].visible , false);
		);
	</action>
	<action name="CirclesControlBarupdateAutorotationButtons">
		if (CirclesControlBarIsOpened,
			CirclesControlBarShowAutorotationButtons();
		,
			CirclesControlBarHideAutorotationButtons();
		);
	</action>



<layer name="CirclesControlBarmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	css="color:#000000;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	xoffset="0"
	yoffset="0"
	padding="2"
	selectable="false"
	zorder="0"
	visible="false"
	html=""
	edge="bottom"
/>
  <action name="CirclesControlBarbuildMenu">
    
    set(CirclesControlBarbutton_pos, 0);

	set(CirclesControlBarbackgroundwidthwhenclosed, 40);
    set(layer[CirclesControlBarbtn_hidecontrols].x, get(CirclesControlBarbutton_pos));
    set(layer[CirclesControlBarbtn_showcontrols].x, get(CirclesControlBarbutton_pos));
    inc(CirclesControlBarbutton_pos, 45);



      if (device.desktop,
        set(layer[CirclesControlBarbtn_display_help].x, get(CirclesControlBarbutton_pos));
        set(layer[CirclesControlBarbtn_close_help].x  , get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
      );

      if (device.fullscreensupport,
        set(layer[CirclesControlBarbtn_openfs].x , get(CirclesControlBarbutton_pos));
        set(layer[CirclesControlBarbtn_closefs].x, get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
      );



      set(layer[CirclesControlBarbtn_autorotate_on].x , get(CirclesControlBarbutton_pos));
      set(layer[CirclesControlBarbtn_autorotate_off].x, get(CirclesControlBarbutton_pos));
      inc(CirclesControlBarbutton_pos, 45);



    if (device.desktop,
      set(layer[CirclesControlBarbtn_ctrlmode_drag_to].x, get(CirclesControlBarbutton_pos));
      set(layer[CirclesControlBarbtn_ctrlmode_move_to].x, get(CirclesControlBarbutton_pos));
      inc(CirclesControlBarbutton_pos, 45);
    );





      if (device.desktop,
        set(layer[CirclesControlBarbtn_right].x, get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
        set(layer[CirclesControlBarbtn_left].x, get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
      );

      if (device.desktop,
        set(layer[CirclesControlBarbtn_down].x, get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
        set(layer[CirclesControlBarbtn_up].x, get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
      );

      if (device.desktop,
        set(layer[CirclesControlBarbtn_out].x, get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
        set(layer[CirclesControlBarbtn_in].x, get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
      );

    if (scene.count GT 1,
        set(layer[CirclesControlBarbtn_next_pano].x, get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
        set(layer[CirclesControlBarbtn_prev_pano].x, get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
      );



      dec(CirclesControlBarbutton_pos, 5);

      set(CirclesControlBarbackgroundwidthwhenopened, get(CirclesControlBarbutton_pos));


    
      set(layer[CirclesControlBar_menu_bg].width, get(CirclesControlBarbackgroundwidthwhenopened));
	
	
	
    </action>

	<events name="CirclesControlBarStartTourEvents" onTourStart="CirclesControlBarCallOnStartTour();" keep="true" />
	
	<action name="CirclesControlBarCallOnStartTour">
		
		CirclesControlBarshowMenuControls();
	</action>



<!-- ********** -->
<!-- Toggle Button - Scene specific -->
<!-- id : togglebuttonpanospecific -->
<!-- ********** -->



  <layer name="togglebuttonpanospecific"
         keep="true"
         url="%FIRSTXML%/graphics/togglebuttonpanoramaspecific/button_zapustit-audiogid.png" 
         align="bottomleft"
         x="10"
         y="10"
         zorder="4"
         state="true"
         onclick="togglebuttonpanospecificOnClick"
		 used_for_hotspots="false"
         alpha="0.7"
         onover="tween(scale, 1.2,0.5,easeOutQuad);tween(alpha,1.0,0.5,easeOutQuad);"
         onout="tween(scale, 1.0,0.5,easeOutQuad);tween(alpha,0.7,0.5,easeOutQuad);"
         visible="false"
         />

  <action name="togglebuttonpanospecificOnClick">
    if (state,
      set(state, false);playTourSounds();


     ,
      set(state, true);stopTourSounds();


    );
  </action>

  <events name="togglebuttonpanospecificevents" 
    onTourStart="showtogglebuttonpanospecific();"
    hidetourcontrols="hidetogglebuttonpanospecific();" 
    showtourcontrols="showtogglebuttonpanospecific();" 
    keep="true" />
  <action name="hidetogglebuttonpanospecific">set(layer[togglebuttonpanospecific].visible, false);</action>
  <action name="showtogglebuttonpanospecific">
    set(displaytheplugin_togglebuttonpanospecific, false);
    if (tour_displaycontrols,
    set(displaytheplugin_togglebuttonpanospecific, true);
    );
    if (displaytheplugin_togglebuttonpanospecific,
      set(layer[togglebuttonpanospecific].visible, true);
    ,
      hidetogglebuttonpanospecific();
    );
  </action>


  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url.flash="%SWFPATH%/graphics/soundinterface.swf"
          url.html5="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          bgsoundtoforce = "false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            set(plugin[soundinterface].bgsoundtoforce, false);
            if(scene[get(xml.scene)].video == false OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
           ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            ,

              if(device.mobile OR device.tablet OR device.safari OR device.chrome,
                resumesound(bgsoundname);
                set(plugin[soundinterface].bgsoundpaused, false);
              );
            );
          ,
            if(((plugin[soundinterface].bgsoundpaused == true OR plugin[soundinterface].bgsoundtoforce == true) AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              set(plugin[soundinterface].bgsound, true);
              set(plugin[soundinterface].bgsoundpaused, false);
              set(plugin[soundinterface].bgsoundloopended, false);
              set(plugin[soundinterface].bgsoundtoforce, false);
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
          );
        );
      );
      
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        
      );
    );
  </action>
  <action name="preloadSounds">
    preloadsound("_4.mp3");
    preloadsound("_5.mp3");
    preloadsound("_1.mp3");
    preloadsound("_2.mp3");
    preloadsound("_3.mp3");
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          ,

            if(device.mobile OR device.tablet OR device.safari OR device.chrome,
              set(tour_current_played_sound_paused, false);
              resumesound(get(tour_current_played_sound));
            );
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

</krpano>